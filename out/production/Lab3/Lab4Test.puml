@startuml
!pragma layout smetana

class Main{
+Main()
+main(String[] args)
}

Main ..> Event
Main ..> Baby
Main ..> ShortPerson
Main ..> Human
Main ..> Town
Main ..> Plant


class Event{
- eventName: String
- emotion: String
+Event(eventName: String)
+resultEvent(eventName: String, emotion: String)
+getName(): String
+getEmotion(): String
+toString(): String
+hashCode(): int
+equals(Object): boolean
}
class Emotion{
-typeOfEmotion: String
+Emotion(typeOfEmotion: String)
+getEmotion(): String
}
abstract class SmallPerson{
- name: String
- ability: String
+SmallPerson(name: String, ability: String)
+getName(): String
+getAbility(): String
+doStuff(String name, String ability): String
}
interface Dreamable{
+dream(String object))
}
interface PLayable{
+play()
}
class Baby extends SmallPerson implements LoveDoingSmth, Dreamable, PLayable{
- currentEmotion: Emotion
+Baby(name: String)
+doStuff(String name, String ability)
+equals(Object): boolean
+loveDoingSmth(String action)
+collectJuice(PlantJuice plantjuice) + local class barrel
+dream(String object)
+play()
+toString(): String
+hashCode(): int
}
interface AbleToSee{
+see(String object)
}
interface AbleToRun{
+run(String destination)
}
interface Hearable{
+hear(String sound)
}
interface AbleToSee{
+see(String direction, String emotion)
}
class ShortPerson extends SmallPerson implements AbleToSee, AbleToRun, Hearable, AbleToGrab, Doable{
- currentEmotion: Emotion
+ShortPerson(name: String)
+doStuff(String name, String ability)
+see(String object)
+hear(String sound)
+run(String destination)
+see(String direction, String emotion)
+equals(Object): boolean
+toString(): String
+hashCode(): int
}
Emotion --o Baby
Emotion --o ShortPerson
Emotion --o Znaika


interface Sayable{
+say(String name, String action): void
}
interface Thinkable{
+think(String name, String action, String durationOfThinking): void
}
interface Doable{
+do(String name, String action, String target): void
}
interface Explainable{
+explain(String name, String action): void
}
enum WeatherType{
SUNNY,
WINDY,
RAINY,
FOGGY,
SNOWY
}
interface Encouterable{
+encounter()
}
class Human implements Encouterable, Sayable, Explainable, Thinkable, Doable, AbleToModify, LoveDoingSmth, Transportable, AbleToAsk, AbleToWish, AbleToGrab, Shoutable, Grabable, Checkable{
-name: String
-currentEmotion: Emotion
-isInCar: boolean
-isInjured: boolean
-eyesOPened: boolean
-isAtHome; boolean
+Human(name: String, currentEmotion: Emotion, modifiedPlant: boolean)
+setCurrentEmotion(Town town)
+getName(): String
+explain(String name, String action)
+say(String name, String action)
+think(String name, String action, String durationOfThinking)
+doTo(String name, String action, String target)
+modifyStuff(Modifiable modifiable)
+wish(String wish)
+ask(Askable askable)
+grab(Grabable grabable)
+shout()
+setEyesOPened(isAtHome)
+setIsInjured(Arbour arbour): boolean
+transport()
+check()
+loveDoingSmth(String action)
+encounter()
+equals(Object): boolean
+toString(): String
+hashCode(): int
}
interface LoveDoingSmth{
+loveDoingSmth(String action)
}
interface Transportable{
+transport()
}
interface AbleToAsk{
+ask(Askable askable)
}
interface AbleToWish{
+wish(String wish)
}
interface AbleToGrab{
+grab(Grabable grabable)
}
interface Shoutable{
+shout()
}
interface Checkable{
+check()
}
class Neznaika extends Human  {
+Neznaika(name: String, currentEmotion: Emotion, isInCar: boolean, eyesOPened: boolean)

}
WeatherType --* Town
interface AbleToModify{
+modify(Modifiable)
}
class Town{
-name: String
-weatherType: WeatherType
+Town(name: String, weatherType: WeatherType)
+equals(Object): boolean
+toString(): String
+hashCode(): int
}
Town ..> Znaika
class Plant implements Modifiable{
-name: String
-plantjuice: PlantJuice
+Plant(name: String, plantjuice: PlantJuice)
+lookAlike(String object)
+equals(Object): boolean
+toString(): String
+hashCode(): int
}
interface Modifiable{
+modify()
}
Znaika --> Plant
Plant --> Town
enum Density{
LOW,
MEDIUM,
HIGH
}
Density --* PlantJuice
PlantJuice --* Plant
class PlantJuice{
- color: String
- levelOfDensity: Density
- flowType: Density
+Juice(color: String, levelOfDensity: Density, flowType: Density)
+thicken(PlantJuice plantjuice)
+flow(PlantJuice plantjuice)
+transformIntoRubber(PlantJuice plantjuice): String
+equals(Object): boolean
+toString(): String
+hashCode(): int
}

'Lab4
interface AbleToDrive{
+drive(Drivable)
}
interface AbleToDrink{
+drink(String object, String amount)
}
class Syropchick extends Human implements AbleToDrive, LoveDoingSmth, AbleToDrink{
+Syropchick(name: String, currentEmotion: Emotion)
+drive(Drivable)
+loveDoingSmth(String action)
+drink(String object, String amount)
}
interface Drivable{
+drive()
}
Enum TankLevel{
FULL,
HALF,
LOW,
EMPTY
}
interface AbleToDestruct{
+destruct(Destructable)
}
interface Roll{
+rollTo(String place)
}
interface Fall{
+fallFrom(Fallable fallable, String resultOfFall)
}
class Car implements Drivable, AbleToDestruct, Roll, Fall{
-model: String
-locationOfVehicle: String
-isInMotion: boolean
+Car(model: String, locationOfVehicle: String, isInMotion: boolean)
+validateTankLevel(TankLevel tankLevel)
+rollTo(String place)
+fallFrom(Fallable fallable, String resultOfFall)
+drive()
+setLocationOfVehicle(isInMotion): String location
}
TankLevel --* Car
class Lever{
+isPulled(isInCar): boolean
}
class Pedal{
+isPressed(isInCar): boolean
}
interface Grabable{
+grab()
}
class SteeringWheel implements Grabable{
isRotated(isInCar):boolean
+grab()
}
Pedal --+ Car
Lever --+ Car
SteeringWheel --+ Car
Car ..> TankLevelException
class TankLevelException extends Exception{
+TankLevelException(String message)
}
interface AbleToTransport{
+transport(Transportable transportable, String methodOfTransportation)
}
interface Askable{
+ask()
}
class Toropyjka extends Human implements AbleToTransport, Askable{
-questionIsAsked: boolean
+Toropyjka(name: String, currentEmotion: Emotion, questionIsAsked: boolean)
+transport(Transportable transportable, String methodOfTransportation)
+isHome(): boolean
+ask()
}
abstract class Place{
-name: String
+Place(name: String)
}
interface Fallable{
+fall()
}
class Breakage extends Place implements Fallable{
+Breakage(name: String)
+fall()
}
class Home extends Place{
+Home(name: String)
-peopleAtHome: ArrayList<String>
}
interface Destructable{
+destructed()
}
class Arbour extends Place implements Destructable{
-isDestructed: boolean
+Arbour(name: String, isDestructed: boolean)
+destructed()
}
interface AbleToCheck{
+check(Checkable checkable)
}
class Doctor extends Human implements AbleToCheck{
+Doctor(name: String, currentEmotion: Emotion)
+check(Checkable)
}
interface AbleToPlay{
+play(Playable playable, String nameOfGame)
}
class Gunka extends Human implements AbleToPlay, AbleToWish{
-currentMood: String
+Gunka(name: String, currentEmotion: Emotion, currentMood: String)
+play(Playable playable, String nameOfGame)
+wish(String wish)
}
@enduml